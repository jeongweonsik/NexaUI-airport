<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="frmMdi" width="1598" height="36" titletext="MdiFrame" onsize="form_onsize" cssclass="frm_MDI" onload="formOnload">
    <Layouts>
      <Layout height="36" width="1598">
        <Div id="divMenuButton" taborder="8" top="0" width="174" bottom="0" right="16" visible="false">
          <Layouts>
            <Layout>
              <Button id="btnMenuList" taborder="0" top="6" width="24" height="24" tooltiptext="열린탭목록" right="0" cssclass="btn_MDI_TabList" onclick="divMenuButton_btnMenuList_onclick"/>
            </Layout>
          </Layouts>
        </Div>
        <Button id="btnHome" taborder="2" left="-4" top="0" width="76" tooltiptext="메인화면" bottom="0" onclick="btnHome_onclick" text="MAIN"/>
        <Div id="divTab" taborder="0" left="btnHome:0" top="0" bottom="0" right="divMenuButton:0" formscrollbartype="none none" formscrolltype="none"/>
        <Button id="btn00_00" taborder="1" left="0" top="50" width="36" height="36" tooltiptext="메뉴보이기" cssclass="btn_MDI_MenuShow" visible="false"/>
        <Button id="btn_MDI_Menu" taborder="3" left="72" top="50" width="160" height="36" text="화면타이틀8글자..." cssclass="btn_MDI_Menu" visible="false"/>
        <Button id="btn00_02_00" taborder="4" left="232" top="50" width="160" height="36" text="선택화면타이틀8..." cssclass="btn_MDI_Menu_S" visible="false"/>
        <Button id="btn00_03_00" taborder="5" left="368" top="60" width="18" height="18" tooltiptext="닫기" cssclass="btn_MDI_Extra_S" visible="false"/>
        <Button id="btn_MDI_Extra" taborder="6" left="208" top="60" width="18" height="18" tooltiptext="닫기" cssclass="btn_MDI_Extra" visible="false"/>
        <Button id="btn00_01_00" taborder="7" left="36" top="50" width="36" height="36" tooltiptext="메인화면" cssclass="btn_MDI_Home_S" visible="false"/>
        <PopupDiv id="pdivOpenMenu" visible="false" top="90" width="202" height="302" cssclass="pdiv_WF_Option" right="10">
          <Layouts>
            <Layout>
              <Grid id="grdOpenMenu" taborder="0" left="0" top="0" bottom="0" right="0" binddataset="gdsOpenMenu" fillareatype="none" autofittype="col" cssclass="grd_MDI_TabList" oncellclick="pdivOpenMenu_grdOpenMenu_oncellclick">
                <Formats>
                  <Format id="default">
                    <Columns>
                      <Column size="160"/>
                      <Column size="40"/>
                    </Columns>
                    <Rows>
                      <Row size="30"/>
                    </Rows>
                    <Band id="body">
                      <Cell text="bind:MENU_NM" tooltiptext="bind:MENU_NM"/>
                      <Cell col="1" displaytype="buttoncontrol"/>
                    </Band>
                  </Format>
                </Formats>
              </Grid>
            </Layout>
          </Layouts>
        </PopupDiv>
        <Button id="btn00_02_00_00" taborder="12" left="260" top="134" width="160" height="36" text="선택화면타이틀8..." cssclass="btn_MDI_Menu_S" visible="false"/>
        <Static id="staInfoNavi" taborder="10" text="메뉴1&gt;메뉴2&gt;메뉴3" left="1630" top="12" width="130" height="21" background="#000000" color="#ffffff" visible="false" padding="0px 0px 0px 5px"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[/**
* mdi frame 
*@FileName  frmMdi
*@Creator 	
*@CreateDate 2024/10/21
*@Desction    
************** 소스 수정 이력 ***********************************************
*  date          		Modifier                Description
*******************************************************************************
*  
*******************************************************************************
*/

/*******************************************************************************************************************************
 * FORM 변수 선언 영역
*******************************************************************************************************************************/

this.fvFirstGap         = 0;
this.fvBtnGap           = 0;
this.fvTabHeight        = 36;
this.fvTabWidth        =  187;
this.fvTabExtraRightGap = 25;
this.fvExtraWidth       = 18;
this.fvExtraTop         = 9;
this.fvExtraHeight      = 18;
this.fvExtraBtnPrefix   = "EXTRA_";
this.fvTabBtnPrefix     = "TAB_";
this.fvMenuId = "";
this.bClose;
//css
this.fvCssMdi    = "btn_MDI_Menu";
this.fvCssMdiS   = "btn_MDI_Menu_S";
this.fvCssExtra  = "btn_MDI_Extra";
this.fvCssExtraS = "btn_MDI_Extra_S";
this.fvCssHome   = "btn_MDI_Home";
this.fvCssHomeS  = "btn_MDI_Home_S"; 

/*******************************************************************************************************************************
 * FORM EVENT 영역(onload, onbeforeclose..)
*******************************************************************************************************************************/
/**
 * @description 화면 오픈
 */
this.formOnload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{	
    
};

/**
 * @description 메뉴 tab Button 동적생성
 * @param {string} sWindId - 메뉴키값
 * @param {string} sName - 메뉴명
 */
this.fnAddTab = function (sWindId, sName)
{	
	
	let nRow = this.dsTab.findRow(this.colInfo.menu.winid, sWindId);
	
	if (nRow > -1) return nRow;

	const sTabID = this.fvTabBtnPrefix + sWindId;
	
	nRow = this.dsTab.addRow();
	this.dsTab.setColumn(nRow, this.colInfo.menu.tabid , sTabID);
	this.dsTab.setColumn(nRow, this.colInfo.menu.winid, sWindId);
	this.dsTab.setColumn(nRow, this.colInfo.menu.nm, sName);
  
	this.fnAddTabBtn(sTabID, sName);
	this.fnRedrawTab();
	
	this.bClose = true;
	
	return nRow;
}

/*
* 메뉴 현재 tab id가져오는 함수
* @public
* @param
* @return  {string} WIN_ID
* @example
* @memberOf 
*/
this.fnGetCurTab = function ()
{
	if (this.dsTab.rowposition < 0) return false;
	
	const sTtile  = this.dsTab.getColumn(this.dsTab.rowposition, this.colInfo.tab.nm);
	return this.dsTab.getColumn(this.dsTab.rowposition, this.colInfo.menu.tabid);
};

this.fnIsMain = function (tabID)
{   
	if(tabID.indexOf("winMAIN") >-1) return true;
	
	return false;
};

/**
 * @description 메뉴 tab 신규 동적 생성
 * @param {string} sTabID - 메뉴키값
 * @param {string} sTabName - 메뉴명
 */
this.fnAddTabBtn = function (sTabID, sTabName)
{
	let objTab;
	let objBtn;
	let sExBtnId = this.fvExtraBtnPrefix + sTabID;   //extra button id
	this.fvMenuId  =    sTabID.substr( sTabID.lastIndexOf("_")+1);	
    let sTabNavi    =  app.gdsMenu.lookupAs(this.colInfo.menu.cd,this.fvMenuId , this.colInfo.menu.navi);
	let objTextWidth =  "";

	if (this.gfnIsNull(this.fnFindObj(sTabID))) 
	{
		objTab = new Button();
		objTab.init(sTabID, this.fnGetLeft(sTabID), 0, this.fvTabWidth, this.fvTabHeight, null, null);  
		this.divTab.addChild(objTab.name, objTab);
		
	}
    let nSize = 0;
    if(/[a-zA-Z]/.test(sTabName)) nSize =15;
	else nSize = 24;

	let txtLength =  this.gfnGetByteCount(sTabName);

    if(txtLength  > nSize){
	   if(/[a-zA-Z]/.test(sTabName))  sTabName = sTabName.substr(0,txtLength-6) + "...";	  	
       else sTabName = sTabName.substr(0,10) + "...";	 
	}
    
	objTab.text = sTabName;
     objTab.tooltiptext = sTabNavi;
	objTab.cssclass = this.fvCssMdiS;	
	objTab.show();
	objTab.setEventHandler("onclick", this.btnTab_onclick, this);

	if (this.fnFindObj(sExBtnId) == null) 
	{		
		objBtn = new Button();		
		objBtn.init(sExBtnId, objTab.getOffsetRight() - this.fvTabExtraRightGap, this.fvExtraTop, objTab.getOffsetRight() - this.fvTabExtraRightGap + this.fvExtraWidth - (objTab.getOffsetRight() - this.fvTabExtraRightGap), this.fvExtraTop + this.fvExtraHeight - this.fvExtraTop);
		this.divTab.addChild(sExBtnId, objBtn);

		objBtn.cssclass = this.fvCssExtraS;
		//objBtn.set_cursor("pointer");
		objBtn.show();		
		objBtn.setEventHandler("onclick", this.btnExtra_onclick, this);		
	}
}


/**
 * @description 화면 리사이징
 */
this.form_onsize = function(obj:nexacro.Form,e:nexacro.SizeEventInfo)
{
	this.fnRedrawTab();
};

/*******************************************************************************************************************************
 * Transaction 서비스호출 처리 영역
*******************************************************************************************************************************/

/*******************************************************************************************************************************
 * Callback 영역 (Transaction, popup, message..)
*******************************************************************************************************************************/


/*******************************************************************************************************************************
 * 사용자 Function 영역
*******************************************************************************************************************************/

/**
 * mdi arrange 처리 함수
 * @public
 * @return 
 * @example
 * @memberOf 
 */
this.btnArrange_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
   
   if(this.isNull(obj.name)) return;
   
   let strType = obj.name.replace("btn", "");
	
	// this.console.log(" ## strType==> " + strType.toLowerCase());
	
	this.fnArrangeWin(strType.toLowerCase());
}

/**
 * 열려있는 윈도우 화면을 정렬
 * @param	: 	strType: 정렬 타입
 * @return	:   N/A
 */
this.fnArrangeWin = function(strType) 
{
    strType = strType.toLowerCase();
	// workFrame영역에 open된 childFrame 갯수
	const iFramesCnt = app.frame.work.frames.length;

	if (this.dsTab.getRowCount() == 0) return;
     let i=0
	
	switch (strType)
	{
		case "maximize" :
		
		    const curWinId = app.frame.work.getActiveFrame().name;
			
			for (; i<iFramesCnt; i++) 
			{
				app.frame.work.frames[i].openstatus = "maximize";		
				app.frame.work.frames[i].showtitlebar = false;		
				app.frame.work.frames[i].border = "0px solid #C8D0DF";			
			}        

			this.isActiveFrame(curWinId);
			break;
		
		case "closeall" :	
		    let isCloseCheck = true;
			for (i=iFramesCnt-1; i>=0; i--) {			

				let winId = app.frame.work.frames[i].name;
				const sMenuNm = this.gfnGetLookupData(app.gdsOpenMenu,this.colInfo.menu.winid, winId, this.colInfo.menu.nm);	
							
				if (!app.frame.work.frames[i].form.isClosWork()){
					let sMsgId = "10153";							//메세지ID
					let arrArg = ["화면 " + sMenuNm ];				//현재								
					// 변경된 데이터가 있습니다. 현재 화면을 닫겠습니까?
					 // 변경된 내역을 저장 하시겠습니까?
					 this.gfnConfirm(sMsgId,arrArg,(yes)=>{

						   if(yes)  this.fnTabOnClose(winId);
						   
					 });
					 break;
				}else{
				   this.fnTabOnClose(winId);	
				}
			}
			
			break;		

		default :

			for (; i<iFramesCnt; i++)
			{	
				app.frame.work.frames[i].showtitlebar = true;
				app.frame.work.frames[i].border = "1px solid #949BA8,1px solid #C8D0DF,1px solid #C8D0DF,1px solid #C8D0DF";	
				app.frame.work.frames[i].titlebarheight = 30;
			 	app.frame.work.frames[i].titlebar.maxbutton.enable = true;
				app.frame.work.frames[i].titlebar.closebutton.setEventHandler("onclick",this.fnSetCloseButton_onclick,this);
				app.frame.work.frames[i].titlebar.maxbutton.setEventHandler("onclick",this.fnSetMaxButton_onclick,this);				
			}
		
			app.frame.work.arrange(strType);
			break;
	}
};


// close button onclick handler
this.fnSetCloseButton_onclick = function (obj,e)
{     
    const sWinId = obj.parent.parent.name.split(this.fvTabBtnPrefix).join("").split(this.fvExtraBtnPrefix).join("");
	const sMenuId = this.gfnGetLookupData(app.gdsOpenMenu,this.colInfo.menu.winid, sWinId, this.colInfo.menu.cd);	
	const sMenuNm = this.gfnGetLookupData(app.gdsOpenMenu,this.colInfo.menu.winid, sWinId, this.colInfo.menu.nm);	
	const objFrame = app.frame.work.frames;
	const objForm =  objFrame[sWinId].form;
	
	let rtn = objForm.isClosWork();  // 화면단 저장여부 체크
	obj.rtn  =rtn;

	if (!rtn){
	  let sMsgId = "10153";			//메세지ID
	  let arrArg = ["화면 " + sMenuNm ];										
		// 변경된 데이터가 있습니다. 현재 화면을 닫겠습니까?		 
	 this.gfnConfirm(sMsgId,arrArg,(yes)=>{

		   if(yes){
			  obj.rtn = true;
			  this.fnTabOnClose(sWinId);
		   }
		   
	 });	
	}
	
};

// max button onclick handler
this.fnSetMaxButton_onclick = function (obj,e)
{
	this.fnArrangeWin("maximize");
};
/**
 * @description MDI 버튼 재조정
 */
this.fnRedrawTab = function (sGubn)
{
 
     if (this.gfnIsNull(sGubn)) sGubn = "move";

	//this.fnSetTabSpinBtnShow();

	if (this.dsTab.rowcount < 1) return;

	let objTabFirst = this.fnFindObj(this.dsTab.getColumn(0, this.colInfo.menu.tabid));
	var nLeft = objTabFirst.getOffsetLeft();
	
	let objTabLast  = this.fnFindObj(this.dsTab.getColumn(this.dsTab.rowcount - 1, this.colInfo.menu.tabid));
	let nRight = objTabLast.getOffsetRight();
	
	if (this.divTab.getOffsetWidth() >= (nRight - nLeft)) 
	{
		this.fnMoveFirst(0);
	} else 
	{
		// 메뉴 추가 시 버튼 잘림 방지
		if (sGubn == "add") 
		{
			this.fnMoveFirst(this.fnGetFirstTabIndex() + 1);
		}
	}
}

/**
 * @description MDI spin 버튼 활성/비활성화 처리
 */
this.fnSetTabSpinBtnShow = function ()
{
	let objTab;
	
	this.fnSetMenuButtonVisible();   // 버튼 제어 활성/비활성화
	
	if (this.dsTab.rowcount == 0) 
	{		
		this.btnPreMdi.visible = false;
		this.btnNexMdi.visible = false;
		return;
	}

	objTab = this.fnFindObj(this.dsTab.getColumn(this.dsTab.rowcount - 1, this.colInfo.menu.tabid));
	if (this.divTab.getOffsetWidth() < objTab.getOffsetRight()) 
	{
		this.btnNexMdi.set_visible(true);
	} else 
	{
		this.btnNexMdi.visible = false;
	}

	objTab = this.fnFindObj(this.dsTab.getColumn(0, this.colInfo.menu.tabid));
	if (objTab.getOffsetLeft() < 0) 
	{
		this.btnPreMdi.set_visible(true);
	} else 
	{
		this.btnPreMdi.visible = false;
	}
	
	if(!this.btnPreMdi.visible && !this.btnNexMdi.visible){
	    this.divTab.set_right("divMenuButton:0px");	 
	}else if(this.btnPreMdi.visible){
	   this.divTab.set_right("btnPreMdi:0px");
	}else if(!this.btnPreMdi.visible && this.btnPreMdi.visible){
	  this.divTab.set_right("btnNexMdi:0px");
	}
	this.resetScroll();
}

/**
 * @description 메인/서브 디자인 적용
 */
this.fnSetStyle = function(sType) 
{ 
	if (sType == "sub") 
	{
		// 서브일때 정렬 사용
		//this.fnSetEnableArrange(true);			
		
		// 화면버튼 디자인 설정
		let sCurWinId = app.frame.vFrsWork.getActiveFrame().name;		
		this.fnSetActive(this.fvTabBtnPrefix + sCurWinId.name);
		
		// 메인버튼 디자인 설정
		this.btnHome.set_cssclass(this.fvCssHome); 
	}
	else  
	{
		// 메인일때 정렬 사용못함
		//this.fnSetEnableArrange(false);			
		
		// 메인버튼 디자인 설정
		this.btnHome.set_cssclass(this.fvCssHomeS);
		
		// 화면버튼 디자인 설정
		this.fnSetActiveBtn("btnHome");
	}
};

/**
 * @description cascade 제어버튼 활성/비활성
 * @param {Boolean} bEnable - 활성화여부
 */
this.fnSetEnableArrange = function(bEnable) {
	this.btnCloseAll.set_enable(bEnable);
};

/**
 * @description menu tab 현재 버튼 이동
 * @param {String} sTabID - 이동할 탭 ID
 */
this.fnSetActive = function (sTabID)
{
	const nRow = this.dsTab.findRow(this.colInfo.menu.tabid, sTabID);
	if (nRow < 0) 
	{
		return false;
	}
	
	this.dsTab.set_rowposition(nRow);
	this.fnSetActiveBtn(sTabID);

	return true;
}

/**
 * @description menu tab 현재 버튼 이동
 * @param {String} sTabId - 활성화할 탭 ID
 */
this.fnSetActiveBtn = function (sTabId)
{
	let objTab;
	let objExtraBtn;
	
	for (var i = 0; i < this.dsTab.rowcount; i++) 
	{
		objTab = this.fnFindObj(this.dsTab.getColumn(i, this.colInfo.menu.tabid));
		objExtraBtn = this.fnFindObj(this.fvExtraBtnPrefix + this.dsTab.getColumn(i, this.colInfo.menu.tabid));

		if(sTabId == this.dsTab.getColumn(i, this.colInfo.menu.tabid)) 
		{		
			objTab.set_cssclass(this.fvCssMdiS);
			this.fnShowTabBtn(i);
			this.fnSetStyle('sub');			
		}
		else 
		{
		   objTab.set_cssclass(this.fvCssMdi);
		    
		}
	}
}

/**
 * @description menu tab 현재 버튼 보여주는 함수
 * @param {String} nIdx - 탭버튼인덱스
 */
this.fnShowTabBtn = function (nIdx)
{
	let n;
	let nLeft;
	let nRight;

	let objTab = this.fnFindObj(this.dsTab.getColumn(nIdx, this.colInfo.menu.tabid));
	nLeft = objTab.getOffsetLeft();
	nRight = objTab.getOffsetRight();

	if(0 <= nLeft && this.divTab.getOffsetWidth() >= nRight) 
	{
		return;
	}

	if (nLeft < 0) 
	{
		this.fnMoveFirst(nIdx);
		return;
	}

	let nMoveIdx = nIdx;
	
	for (var i = this.fnGetFirstTabIndex() + 1; i < this.dsTab.rowcount; i++) 
	{
		objTab = this.fnFindObj(this.dsTab.getColumn(i, this.colInfo.menu.tabid));
		if (nRight - objTab.getOffsetLeft() <= this.divTab.getOffsetWidth()) 
		{
			nMoveIdx = i;
			break;
		}
	}
	
	this.fnMoveFirst(nMoveIdx);
}


this.fnSetMenuButtonVisible = function (b)
{
     if(this.dsTab.getRowCount() > 0) this.divMenuButton.set_visible(true);
	 else  this.divMenuButton.visible = false;	

};
/**
 * @description menu tab 찾는 함수
 */
this.fnFindObj = function (sId)
{
	return this.divTab.form.components[sId];
}

/**
 * @description menu tab 버튼 첫번째 이동 함수
 */
this.fnMoveFirst = function (nMoveIdx)
{
	let nIndex;
	let sTabId;
	let objTab;
	let objExtraBtn;
	let objTabFirst;

	nIndex = this.fnGetFirstTabIndex();
	
	if (nIndex < 0) 
	{
		return;
	}

	if (nMoveIdx < 0) 
	{
		return;
	}
	if (nMoveIdx >= this.dsTab.rowcount) 
	{
		return;
	}

	sTabId = this.dsTab.getColumn(nIndex, this.colInfo.menu.tabid);
	objTabFirst = this.fnFindObj(sTabId);

	sTabId = this.dsTab.getColumn(nMoveIdx, this.colInfo.menu.tabid);
	objTab = this.fnFindObj(sTabId);
	
	var nShiftPos = objTab.getOffsetLeft() - objTabFirst.getOffsetLeft();
	for (let i = 0; i < this.dsTab.rowcount; i++) 
	{
		sTabId = this.dsTab.getColumn(i, this.colInfo.menu.tabid);
		objTab = this.fnFindObj(sTabId);
		objExtraBtn = this.fnFindObj(this.fvExtraBtnPrefix + sTabId);		
		objTab.move(objTab.getOffsetLeft() - nShiftPos, objTab.getOffsetTop());
		if(this.gfnIsNull(objExtraBtn) == false )
			objExtraBtn.move(objExtraBtn.getOffsetLeft() - nShiftPos, objExtraBtn.getOffsetTop());
	}
}

/**
 * @description menu tab 버튼 첫번째 index 가져오는 함수
 */
this.fnGetFirstTabIndex = function ()
{
	for (let i=0; i < this.dsTab.rowcount;i++)
	{
		let sTabID  = this.dsTab.getColumn(i, this.colInfo.menu.tabid);
		let objTab = this.fnFindObj(sTabID);
		if (this.gfnIsNull(objTab) == false) 
		{
			if (0 <= objTab.getOffsetLeft()) return i;
		}
	}
	return -1;
}

/**
 * @description 윈도우 키를 기준으로 열려있는 화면 여부 확인
 * @param {string} sWinId : 윈도우 생성 키
 * @example
 */
this.isActiveFrame = function (sWinId)
{
	const framesInfo = app.frame.work.frames;
		
	if(this.gfnIsNull(sWinId)) return true;

	if(framesInfo[sWinId])
	{
	    this.setHomeCss(false);
	    this.gfnSetFrame('work');
		this.fnMoveTab(sWinId);   //tab이동		
		framesInfo[sWinId].setFocus();		
	
		return true;
	}
};

/**
 * @description 메뉴 tab 이동
 * @param {string} sWindId - 메뉴키값
 */
this.fnMoveTab = function (sWindId)
{
	let nRow = this.dsTab.findRow(this.colInfo.menu.tabid, sWindId);
	if (nRow < 0) return nRow;
	
	let sTabId = this.fvTabBtnPrefix + sWindId;
	this.fnSetActive(sTabId);
	this.fnRedrawTab();
}


/**
 * @description 이전 버튼을 기준으로 버튼위치 리턴
 */
this.fnGetLeft = function (sTabId)
{
	let nCurRow = this.dsTab.findRow(this.colInfo.menu.tabid, sTabId);
	if (nCurRow == 0) return this.fvFirstGap;

	const objPrevTab = this.fnFindObj(this.dsTab.getColumn(nCurRow - 1, this.colInfo.menu.tabid));
	return objPrevTab.getOffsetRight() + this.fvBtnGap;
}

/**
 * @description 메뉴닫기(외부호출)
 * @param {String} sMenuId - 메뉴ID
 * @param {String} 저장 여부 체크 여부 false : 체크 안함
 */
this.fnCloseMenu = function(sMenuId,bClose)
{
	if (this.gfnIsNull(sMenuId)) return;	

	const sWinId = this.gfnGetLookupData(app.gdsOpenMenu,this.colInfo.menu.cd, sMenuId, this.colInfo.menu.winid); 
	
	const objFrame = app.frame.work.frames;
	const objForm =  objFrame[sWinId].form;
	
	if(bClose != false){
	  let rtn = objForm.fnWorkFrameClose();  // 화면단 저장여부 체크
	  if (rtn != false) this.fnTabOnClose(sWinId);	
	}else{
	 this.fnTabOnClose(sWinId);	
	}
	
	
};

/**
 * @description 화면 전체 닫기
 * @param {Boolean} bCheck - 전체닫기 체크
 * @return	:   N/A
 */
this.fnCloseAll = function(bCheck) 
{
	if (app.gdsOpenMenu.getRowCount() < 1) return;

	const iFramesCnt = app.frame.work.frames.length;
	let isCloseCheck = this.fnCheckCloseAll(bCheck);
	
	if (isCloseCheck) 
	{
		for (var i=iFramesCnt; i>0; i--) 
		{	
			this.fnTabOnClose(app.frame.work.frames[i-1].name);
		}		
	}
};

/**
 * @description 화면 전체닫기 여부 체크
 * @param {Boolean} bCheck - 전체닫기 체크
 * @return	:   N/A
 */
this.fnCheckCloseAll = function(bCheck) 
{
	// workFrame영역에 open된 childFrame 갯수
	const iFramesCnt = app.frame.work.frames.length;
	let isCloseCheck = true;

//	if (this.gfnIsNull(bCheck)) bCheck	= app.gvCloseCheck;
	
	// 닫기할때 체크할지 여부(변경되도 강제로 닫을때 사용)
	if (bCheck == true) 
	{
		for (let i=0; i<iFramesCnt; i++) 
		{	
		    
			if(!app.frame.work.frames[i].form.isClosWork()){
			  isCloseCheck =  false;
			  break;
			}
			
		
// 			if (this.gfnIsNull(app.frame.work.frames[i].form.fvDivWork.form.lookup("cfn_onclose")))
// 			{
// 			} else
// 			{
// 				if (app.frame.work.frames[i].form.fnWorkFrameClose() == false)
// 				{
// 					isCloseCheck =  false;
// 					break;
// 				} 
// 			}
		}
	}
	
	return isCloseCheck;
};

/**
 * @description 메뉴 tab 닫기 실행 함수
 * @param {String} sWinId - 윈도우ID
 */
this.fnTabOnClose = function (sWinId)
{
    const objFrame =app.frame.work.frames;

	//let sCurWinId = app.vFrsWork.getActiveFrame().name;
	let sCurWinId = app.frame.work.getActiveFrame().name;

	const nRow = app.gdsOpenMenu.findRow(this.colInfo.menu.winid, sWinId);

	// MDI 탭버튼 삭제
	if(!this.gfnIsNull(objFrame[sWinId]) && nRow > -1)
	{
		this.bClose = false;
		let objRemoveChildFrame = app.frame.work.removeChild(sWinId);	
	
		objRemoveChildFrame.destroy();
		objRemoveChildFrame = null;
		this.fnDelTab(sWinId);			
	}

	// 열린화면 제거
	this.gfnRemoveOpenMenuDs(sWinId);

    if(objFrame.length > 0)
    {
		if (sWinId != sCurWinId ) 
		{
		   
			//app.vFrsWork[sCurWinId].setFocus();
         app.frame.work[sCurWinId].setFocus();
		} else 
		{
			sCurWinId = app.frame.work.getActiveFrame();
		
			if (sCurWinId != null) 
			{
				this.fnSetActive(this.fvTabBtnPrefix + sCurWinId.name);
			}
		}
	} else
	{
	   this.gfnSetFrame('main');	   
	    app.frame.main.form.setFocus();   // mainframe setfocus
		
	}
};

/**
 * @description메뉴 tab 삭제
 * @param {String} sWinId - 윈도우ID
 */
this.fnDelTab = function (sWinId)
{
	let nRow = this.dsTab.findRow(this.colInfo.menu.tabid, sWinId);
	if (nRow < 0) return false;
	const sTabId = this.fvTabBtnPrefix + sWinId;
	
	// Removing Tab button.
	this.fnDelTabBtn(sTabId);
	this.dsTab.deleteRow(nRow);
	this.fnRedrawTab();
	return true;
}

/**
 * @description menu tab 삭제
 * @param {String} sTabId - 탭ID
 */
this.fnDelTabBtn = function (sTabId)
{
	const sExtraBtnId = this.fvExtraBtnPrefix + sTabId;
	let objTab = this.fnFindObj(sTabId);
	let objExtraBtn = this.fnFindObj(sExtraBtnId);

	const nShitLeft = objTab.getOffsetWidth() + this.fvBtnGap;
	const nCurRow = this.dsTab.findRow(this.colInfo.menu.tabid, sTabId);

	const nTabLeft = objTab.getOffsetLeft();
	
	if(nTabLeft == 0) 
	{
		if(this.dsTab.rowcount > 1) 
		{
			this.btnPreMdi_onclick();
		}
	}
	
	this.fnRemoveObj(sExtraBtnId);
	this.fnRemoveObj(sTabId);

	const sWinId = sTabId.replace(this.fvTabBtnPrefix, "");
	const nRow = this.dsTab.findRow(this.colInfo.menu.tabid, sWinId);
   let i=0;
	if(nTabLeft < 0)
	{
		for (i = 0 ; i < nRow ; i++) 
		{	
			objTab = this.fnFindObj(this.dsTab.getColumn(i, this.colInfo.menu.tabid));
			objExtraBtn = this.fnFindObj(this.fvExtraBtnPrefix + this.dsTab.getColumn(i, this.colInfo.menu.tabid));
			objTab.move(objTab.getOffsetLeft() + nShitLeft, objTab.getOffsetTop());
			objExtraBtn.move(objExtraBtn.getOffsetLeft() + nShitLeft, objExtraBtn.getOffsetTop());
		}   
	} else
	{
		for (i = nCurRow + 1; i < this.dsTab.rowcount; i++) 
		{	
			objTab = this.fnFindObj(this.dsTab.getColumn(i, this.colInfo.menu.tabid));
			objExtraBtn = this.fnFindObj(this.fvExtraBtnPrefix + this.dsTab.getColumn(i, this.colInfo.menu.tabid));
			objTab.move(objTab.getOffsetLeft() - nShitLeft, objTab.getOffsetTop());
			objExtraBtn.move(objExtraBtn.getOffsetLeft() - nShitLeft, objExtraBtn.getOffsetTop());
		}
	 }
	
	this.bClose = true;
};

/**
 * @description menu tab 삭제  함수
 * @param {String} sObjId - 삭제할 오브젝트 ID
 */
this.fnRemoveObj = function (sObjId)
{
	if (this.fnFindObj(sObjId) == null) 
	{
		return;
	}
	const objDelBtn = this.divTab.removeChild(sObjId);
	if (objDelBtn != null) 
	{
		objDelBtn.destroy();
	}
};
/*******************************************************************************************************************************
 * 각 COMPONENT 별 EVENT 영역
*******************************************************************************************************************************/
/**
 * @description 홈버튼 onclick event 
 */
this.btnHome_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
     
	    if(obj.cssclass == "btn_MDI_Home"){
		    this.setHomeCss(true);
		}else{
		   this.setHomeCss(false);
		}
		
//    if(obj.cssclass == "btn_MDI_Home"){
//         this.fnSetStyle('');
//    }else{
//         this.fnSetStyle('sub');
//    }

   // fnSetStyle
	// 메인으로 이동
	// this.gfnSetMain();
};

/**
 * @description 메뉴 tab onclick event 
 */
this.btnTab_onclick = function (obj:Button, e:ClickEventInfo)
{
	let sWinId = obj.name.split(this.fvTabBtnPrefix).join("");
	this.isActiveFrame(sWinId);
};

/**
 * @description 메뉴 tab extra버튼 클릭시 발생되는 event
 */
this.btnExtra_onclick = function (obj:Button, e:ClickEventInfo)
{     
	const sWinId = obj.name.split(this.fvTabBtnPrefix).join("").split(this.fvExtraBtnPrefix).join("");
	const sMenuId = this.gfnGetLookupData(app.gdsOpenMenu,this.colInfo.menu.winid, sWinId, this.colInfo.menu.cd);	
	
	this.fnCloseMenu(sMenuId);
	
};

/**
 * @description 메뉴 Mdi 이전   split버튼 
 */
this.btnPreMdi_onclick = function (obj:Button, e:ClickEventInfo)
{
	this.fnMoveFirst(this.fnGetFirstTabIndex() - 1);
	this.fnRedrawTab();
};

/**
 * @description 메뉴 Mdi 다음  split버튼 
 */
this.btnNexMdi_onclick = function (obj:Button, e:ClickEventInfo)
{
	this.fnMoveFirst(this.fnGetFirstTabIndex() + 1);
	this.fnRedrawTab();
};

/**
 * @description 열린 메뉴리스트 버튼 click
 */
this.btnList_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	const nWidth = this.pdvOpenMenu.width;
	const nHeight = this.pdvOpenMenu.height;
	
    if (app.gdsOpenMenu.rowcount > 0)
	{
		this.pdvOpenMenu.trackPopupByComponent(obj, 0, obj.height);
	
		this.pdvOpenMenu.form.grdOpenMenu.setFocus();
		this.pdvOpenMenu.form.grdOpenMenu.selectCell(0, 0, true);	
	}
};

/**
 * @description 메뉴 전체닫기 버튼 클릭
 */
this.btnCloseAll_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.fnCloseAll();
};

/**
 * @description 접기/펼치기 버튼 click
 */
this.btnLeftMenuShowHide_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if(obj.cssclass == "btn_MDI_Open") 
	{
		this.gfnShowLeftFrame();
	} else 
	{
		this.gfnHideLeftFrame();
	}
};

/**
 * @description 열린 메뉴리스트 그리드 cellclick
 */
this.pdvOpenMenu_grdOpenMenu_oncellclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	const objDs = obj.getBindDataset();
	
	// 메뉴명 클릭 시
	if(obj.getBindCellIndex("body", this.FRAME_MENUCOLUMNS.title) == e.cell) 
	{
		const sMenuId = objDs.getColumn(e.row, this.FRAME_MENUCOLUMNS.menuId);	
		app.left.form.fnFormOpen(sMenuId, null);
	}
	
	this.pdvOpenMenu.closePopup();
};



/*
 *	left menu 펼침/접힘 event
 */ 
this.btnMenuShowHide_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if(obj.cssclass == "btn_MDI_MenuHide")  // 접힘
	{
	    this.gfnLeftFramShowHide(false);		
	    this.btnMenuShowHide.cssclass = "btn_MDI_MenuShow";	
		 
	} else if(obj.cssclass == "btn_MDI_MenuShow") // 펼침
	{
	    this.gfnLeftFramShowHide(true);		
		this.btnMenuShowHide.cssclass = "btn_MDI_MenuHide";
	}
};

//set HOME BUTTON CSS
this.setHomeCss = function (b)
{
	if(b){
	    this.btnHome.cssclass = "btn_MDI_Home_S";
	}else{
	   this.btnHome.cssclass = "btn_MDI_Home";
	}
};

this.divMenuButton_btnMenuList_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{

  
   let pdiv        = this.pdivOpenMenu; 
   let oGrdOpenMenu = pdiv.form.grdOpenMenu;
   let btnMenuList = this.divMenuButton.form.btnMenuList;
   let ds      = this.pdivOpenMenu.form.grdOpenMenu.getBindDataset();   
   let nTop        = this.height;
   let nLeft       = btnMenuList.width - pdiv.width;
      this.fnPidvOpenMenuGrd_onsize(pdiv,oGrdOpenMenu,ds);  
   if(ds.getRowCount()  == 0 ) return;
 
   this.pdivOpenMenu.trackPopupByComponent(btnMenuList,nLeft,nTop);
};


this.fnPidvOpenMenuGrd_onsize = function(pdiv,grd,ds,h)
{	
	let oGrdOpenMenu = grd;
	let grdHeaderHeight = oGrdOpenMenu.getFormatRowProperty(0,"size");
	let nHeight = ds.getRowCount() * grdHeaderHeight +2;
	let nHBkSize = h || 2;

	ds.rowposition = -1;
    oGrdOpenMenu.height = nHeight;	
    pdiv.height  = nHeight + nHBkSize;
};

this.pdivOpenMenu_grdOpenMenu_oncellclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	if(e.cell == 1){
	    let bindds        = obj.getBindDataset();
		let sMenuId       = bindds.getColumn(e.row,  this.colInfo.menu.cd);		
		let pdiv          = this.pdivOpenMenu; 
		let oGrdOpenMenu  = pdiv.form.grdOpenMenu;   
		let ds            = this.pdivOpenMenu.form.grdOpenMenu.getBindDataset(); 		
		this.fnCloseMenu(sMenuId);
		this.fnPidvOpenMenuGrd_onsize(pdiv,oGrdOpenMenu,ds);  	
	
	}
};
]]></Script>
    <Objects>
      <Dataset id="dsTab" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="tabId" type="STRING" size="256"/>
          <Column id="menuNm" type="STRING" size="256"/>
          <Column id="winId" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsOpenMenu">
        <ColumnInfo>
          <Column id="CHK" type="STRING" size="1"/>
          <Column id="MENU_CD" type="STRING" size="32"/>
          <Column id="MENU_NM" type="STRING" size="32"/>
          <Column id="MENU_LINK" type="STRING" size="32"/>
          <Column id="WIN_ID" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
  </Form>
</FDL>
