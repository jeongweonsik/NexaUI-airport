<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="cmmDebug" left="0" top="0" width="1140" height="640" titletext="DEBUGGING" onload="form_onload" border="1px solid #272b36" onsize="cmmDebug_onsize">
    <Layouts>
      <Layout stepcount="0">
        <Static id="Static27" taborder="11" cssclass="sta_WF_DetailBgT" left="20" top="20" height="36" right="20" minwidth="1100" maxwidth=""/>
        <Static id="Static27_00" taborder="12" cssclass="sta_WF_DetailBgB" top="55" height="36" left="20" right="20" minwidth="1100" maxwidth=""/>
        <Static id="sta_urkey" taborder="9" usedecorate="true" cssclass="sta_WF_DetailLabelT" top="20" width="120" height="36" text="LOCAL" left="20"/>
        <Button id="btnLocalFilter" taborder="7" text="필터해제" height="26" onclick="btnLocalFilter_onclick" top="25" width="74" left="448" cssclass="btn_WF_Inner"/>
        <Edit id="edtLocal" taborder="6" onkeydown="edtLocal_onkeydown" top="25" height="26" width="160" left="526"/>
        <Static id="sta_urkey01" taborder="13" usedecorate="true" cssclass="sta_WF_DetailLabelT" top="20" width="120" height="36" text="Grid" left="690"/>
        <Static id="sta_urkey00" taborder="10" usedecorate="true" cssclass="sta_WF_DetailLabelB" top="55" width="120" height="36" text="GLOBAL" left="20"/>
        <Combo id="cboDataset" taborder="0" top="25" height="26" innerdataset="@dsDataset" codecolumn="PATH" datacolumn="NAME" displayrowcount="25" type="filterlike" onitemchanged="cboDataset_onitemchanged" onkeydown="combo_onkeydown" width="300" left="144"/>
        <Combo id="cboGDS" taborder="1" top="60" height="26" innerdataset="@dsGDS" datacolumn="NAME" onkeydown="combo_onkeydown" displayrowcount="25" type="filterlike" onitemchanged="cboGDS_onitemchanged" width="300" codecolumn="PATH" left="144"/>
        <Button id="btnGlobalFilter" taborder="8" text="필터해제" width="74" height="26" onclick="btnGlobalFilter_onclick" top="60" left="448" cssclass="btn_WF_Inner"/>
        <Combo id="cboGrid" taborder="2" text="Combo00" top="25" height="26" innerdataset="@dsGrid" datacolumn="NAME" codecolumn="PATH" onitemchanged="fnMakeGridFormats" displayrowcount="25" onkeydown="combo_onkeydown" left="814" right="25" minwidth="300" maxwidth=""/>
        <Tab id="tabComponent" taborder="3" left="20" top="111" right="22" tabindex="0" scrollbars="autoboth" onchanged="tabComponent_onchanged" maxwidth="" border="1px solid red" height="509">
          <Tabpages>
            <Tabpage id="tabpage1" text="Dataset">
              <Layouts>
                <Layout>
                  <Grid id="grdDataset" taborder="0" useinputpanel="false" left="0" top="40" binddataset="dsGridDataset" cellsizingtype="col" cellmovingtype="col" selecttype="multiarea" right="0" bottom="0" autosizingtype="both" autosizebandtype="allband" onkeyup="tabComponent_tabpage1_grdDataset_onkeydown" unodata="false" extendsizetype="row">
                    <Formats/>
                  </Grid>
                  <Static id="sta_totcnt" taborder="1" left="6" top="8" width="188" height="32" usedecorate="true"/>
                </Layout>
              </Layouts>
            </Tabpage>
            <Tabpage id="tabpage2" text="SaveXML">
              <Layouts>
                <Layout>
                  <TextArea id="txtSaveXML" taborder="0" left="0" top="10" right="0" bottom="0"/>
                </Layout>
              </Layouts>
            </Tabpage>
            <Tabpage id="tabpage3" text="Dataset To Grid">
              <Layouts>
                <Layout>
                  <TextArea id="txtSetGrid" taborder="0" left="0" top="10" right="0" bottom="0"/>
                </Layout>
              </Layouts>
            </Tabpage>
            <Tabpage id="tabpage4" text="Grid Format">
              <Layouts>
                <Layout>
                  <TextArea id="txtGridFormat" taborder="0" top="10" left="0" right="0" bottom="0"/>
                </Layout>
              </Layouts>
            </Tabpage>
            <Tabpage id="tabpage5" text="Components">
              <Layouts>
                <Layout>
                  <Grid id="grdProperties" taborder="0" useinputpanel="false" left="0" top="10" binddataset="dsProperties" cellsizingtype="col" cellmovingtype="col" autofittype="col" selecttype="area" bottom="0" width="360" extendsizetype="row" autosizingtype="none" onkeydown="tabComponent_tabpage1_grdDataset_onkeydown">
                    <Formats>
                      <Format id="default">
                        <Columns>
                          <Column size="160"/>
                          <Column size="186"/>
                        </Columns>
                        <Rows>
                          <Row size="33" band="head"/>
                          <Row size="33"/>
                        </Rows>
                        <Band id="head">
                          <Cell text="Properties Name"/>
                          <Cell col="1" text="Value"/>
                        </Band>
                        <Band id="body">
                          <Cell style="align:left;" text="bind:NAME"/>
                          <Cell col="1" edittype="none" style="align:left;" text="bind:VALUE" wordWrap="char" displaytype="normal" autosizerow="limitmax"/>
                        </Band>
                      </Format>
                    </Formats>
                  </Grid>
                  <TextArea id="txtScript" taborder="1" top="10" right="0" bottom="0" left="370" onchanged="tabComponent_tabpage5_txtScript_onchanged"/>
                </Layout>
              </Layouts>
              <InitValue>
                <TextArea id="txtScript" style="color:black;font:12 Fixedsys;"/>
              </InitValue>
            </Tabpage>
            <Tabpage id="tabpage6" text="Variable">
              <Layouts>
                <Layout>
                  <Grid id="grdVariable" taborder="0" useinputpanel="false" left="0" top="40" binddataset="dsVariable" cellsizingtype="col" cellmovingtype="col" autofittype="col" selecttype="area" right="0" bottom="0">
                    <Formats>
                      <Format id="default">
                        <Columns>
                          <Column size="340"/>
                          <Column size="926"/>
                        </Columns>
                        <Rows>
                          <Row size="33" band="head"/>
                          <Row size="33"/>
                        </Rows>
                        <Band id="head">
                          <Cell text="Variable Name"/>
                          <Cell col="1" text="Value"/>
                        </Band>
                        <Band id="body">
                          <Cell style="align:left;color:BIND(COLOR);color2:BIND(COLOR);" text="bind:NAME"/>
                          <Cell col="1" edittype="normal" style="align:left;color:BIND(COLOR);color2:BIND(COLOR);" text="bind:VALUE"/>
                        </Band>
                      </Format>
                    </Formats>
                  </Grid>
                  <Combo id="cboVariable" taborder="1" text="Local" top="10" innerdataset="@dsVariableType" codecolumn="CODE" datacolumn="NAME" index="0" value="FORM" width="140" height="26" onitemchanged="tabComponent_tabpage6_cboVariable_onitemchanged" right="0"/>
                  <Static id="Static00" taborder="2" text="Variable Type" top="10" width="101" height="26" cssclass="sta_WF_InlineLabel" right="cboVariable:10"/>
                </Layout>
              </Layouts>
              <InitValue>
                <Static id="Static00" text="Variable Type"/>
              </InitValue>
            </Tabpage>
            <Tabpage id="tabpage7" text="Run Script">
              <Layouts>
                <Layout>
                  <TextArea id="txtScript" taborder="0" top="40" left="0" right="0" bottom="70" value="//디버그 실행 예제&#10;//alert(this.opener.dsList.saveXML());"/>
                  <Button id="btnRunScript" taborder="1" text="Run Script" height="26" width="102" onclick="fnExecScript" top="10" right="0" cssclass="btn_WF_Action"/>
                  <TextArea id="txtResult" taborder="2" left="0" right="0" bottom="0" height="60" readonly="true"/>
                </Layout>
              </Layouts>
            </Tabpage>
          </Tabpages>
        </Tab>
        <Edit id="edtGlobal" taborder="5" onkeydown="edtGlobal_onkeydown" top="60" height="26" width="160" left="526"/>
        <Static id="sta_urkey01_00" taborder="14" usedecorate="true" cssclass="sta_WF_DetailLabelB" top="55" width="120" height="36" text="Component" left="690"/>
        <Combo id="cboComponents" taborder="4" innerdataset="@dsComponents" codecolumn="PATH" datacolumn="NAME" top="60" height="26" displayrowcount="25" onitemchanged="cboComponents_onitemchanged" onkeydown="combo_onkeydown" left="814" right="25" minwidth="300" maxwidth=""/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsDataset" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="PATH" type="STRING" size="256"/>
          <Column id="NAME" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsGDS" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="PATH" type="STRING" size="256"/>
          <Column id="NAME" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsGrid" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="PATH" type="STRING" size="256"/>
          <Column id="NAME" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsGridDataset" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false"/>
      <Dataset id="dsComponents" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="PATH" type="STRING" size="256"/>
          <Column id="NAME" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsProperties" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="NAME" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
          <Column id="FUNCTION" type="STRING" size="256"/>
          <Column id="COLOR" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsVariableType" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="NAME" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CODE">FORM</Col>
            <Col id="NAME">Form</Col>
          </Row>
          <Row>
            <Col id="CODE">GLOBAL</Col>
            <Col id="NAME">Global</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsVariable" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="NAME" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
          <Column id="TYPE" type="STRING" size="256"/>
          <Column id="LVL" type="INT" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsDatasetView" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="NAME" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
          <Column id="TYPE" type="STRING" size="256"/>
          <Column id="LVL" type="INT" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[/**
* 디버깅 폼
*@FileName  cmmDebug
*@Creator 	
*@CreateDate 2025/04/18
*@Desction    
************** 소스 수정 이력 ***********************************************
*  date          		Modifier                Description
*******************************************************************************
*  
*******************************************************************************
*/
/************************************************************************************************
 * include 선언부
 ************************************************************************************************/

/************************************************************************************************
 * FORM 변수 선언 영역
 ************************************************************************************************/
//app = nexacro.getApplication();
this.fvCurrentCombo = "cboDataset"; // 현재선택이 로컬데이터셋인지 / GDS인지의 구분처리 
/************************************************************************************************
 * FORM EVENT 영역(onload, onbeforeclose)
 ************************************************************************************************/
this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{

//    let menuLink;
//    if(this.parent.parent.arguments) menuLink = this.parent.parent.arguments[this.colInfo.menu.link];
//    else menuLink = this.opener.name;
//  
//     menuLink = menuLink.replace(".xfdl","");
//  
//     this.div00.form.txtMenuTitle.set_value(`(${menuLink})`);
   
	
	this.fnSaveDatasetList(this.opener);
	 this.fnSetInsertSelect();
	this.fnMakeDatasetGrid();

	// 글로벌 데이터셋을 가져온다. 
	this.fnSaveGDSList();
	this.dsGDS.set_keystring("S:NAME");

    // 화면의 GRID의 목록을 가져온다. 
	this.fnSaveGridList(this.opener);
	this.cboGrid.set_index(0);	

    // 화면의 컴포넌트의 목록을 가져온다. 
	this.fnSaveComponetsList(this.opener);
	this.cboComponents.set_index(0);	

	// 화면에서 사용되는 변수목록을 가져온다. 
	this.dsVariable.clearData();
	this.fnSaveVariableList(this.opener);
	
	// 글로벌 변수 목록을 가져온다.
	this.fnSaveGlobalVariableList();
	this.dsVariable.set_keystring("S:LVL+NAME");
	//var sRunMode = nexacro.getEnvironmentVariable("evRunMode");	
	
	this.resetScroll();
};

/************************************************************************************************
 * CALLBACK 콜백 처리부분(Transaction, Popup)
 ************************************************************************************************/
 
 
/************************************************************************************************
 * CRUD 및 TRANSACTION 서비스 호출 처리
 ************************************************************************************************/

 
/************************************************************************************************
 * 사용자 FUNCTION 영역
 ************************************************************************************************/
 
 this.fnSetInsertSelect = function ()
 { 
	 let stxt =  "= 선택 =";
	 
    // dataset
     let irow1  = this.dsDataset.insertRow(0);
		this.dsDataset.setColumn(irow1, "PATH", "");
		this.dsDataset.setColumn(irow1, "NAME", stxt);
		this.cboDataset.set_index(0);		
		
	//global dataset	
	 let irow2  = this.dsGDS.insertRow(0);
		this.dsGDS.setColumn(irow2, "PATH", "");
		 this.dsGDS.setColumn(irow2, "NAME", stxt);
		this.cboGDS.set_index(0);	
 	//Grid	
	     let irow3  = this.dsGrid.insertRow(0);
		 this.dsGrid.setColumn(irow3, "PATH", "");
		 this.dsGrid.setColumn(irow3, "NAME", stxt);
		this.cboGrid.set_index(0);		
 		
 	//component
	let irow4  = this.dsComponents.insertRow(0);
	
		this.dsComponents.setColumn(irow4, "PATH", "");
		this.dsComponents.setColumn(irow4, "NAME", stxt);
		this.cboComponents.set_index(0);
 	
 };
 
 /**
 * @description 데이터셋의 목록을 찾아 저장한다. 
*/
this.fnSaveDatasetList = function(targetObj, fullpath)
{
	//trace("=============== fnSaveDatasetList targetObj.name : " + targetObj.name + " / fullpath : " + fullpath);
    let datasetlist = targetObj.objects;	
    for(var i=0;i<datasetlist.length;i++)
    {
		if( datasetlist[i]+"" == "[object Dataset]" )
		{
			// Grid 우측 팝업메뉴용 Dataset 제거
			if (datasetlist[i].id.indexOf("dsPopupMenu_") == -1) {
				let nRow = this.dsDataset.addRow();
				this.dsDataset.setColumn(nRow, "NAME", datasetlist[i].id);

				if( this.gfnIsNull(fullpath) )
				{
					this.dsDataset.setColumn(nRow, "PATH", datasetlist[i].id);
				}
				else
				{
					let displayname = fullpath+"."+datasetlist[i].id;				
					this.dsDataset.setColumn(nRow, "NAME", displayname);
					this.dsDataset.setColumn(nRow, "PATH", fullpath+"."+datasetlist[i].id);
				}
			}
        }
    }

    let objList = targetObj.components;
    let sObjType;
	
    for(let i=0;i<objList.length;i++)
    {
        sObjType = objList[i]+"";
		
        // Div
        if( sObjType == "[object Div]" )
        {
            if( this.gfnIsNull(fullpath) )
                this.fnSaveDatasetList(objList[i].form, objList[i].id+".form");
            else
                this.fnSaveDatasetList(objList[i].form, fullpath+"."+objList[i].id+".form");
        }
        // Tab
        else if( sObjType == "[object Tab]" )
        {
            var tabPageList = objList[i].tabpages;
            for(let j=0;j<tabPageList.length;j++)
            {
                if( this.gfnIsNull(fullpath) )
                    this.fnSaveDatasetList(tabPageList[j].form, objList[i].id+tabPageList[j].id+".form");
                else
                    this.fnSaveDatasetList(tabPageList[j].form, fullpath+"."+objList[i].id+tabPageList[j].id+".form");
            }
        }
    }
};

/**
 * @description 화면의 그리드목록을 저장한다. 
*/
this.fnSaveGridList = function(targetObj, fullpath)
{
    let sObjType;
    
    let objList = targetObj.components;    
    for(let i=0;i<objList.length;i++)
    {
        sObjType = objList[i]+"";
        
		if( objList[i]+"" == "[object Grid]" )
		{    
            let nRow = this.dsGrid.addRow();
			
			let displayname = this.gfnIsNull(fullpath) ? objList[i].name : fullpath+"."+objList[i].name;
			this.dsGrid.setColumn(nRow, "NAME", displayname);
            //this.dsGrid.setColumn(nRow, "NAME", objList[i].name);

            if (this.gfnIsNull(fullpath)) {
                this.dsGrid.setColumn(nRow, "PATH", objList[i].name);
            }
			else {
                this.dsGrid.setColumn(nRow, "PATH", fullpath+"."+objList[i].name);
			}
        }        

        // Div
        if( sObjType == "[object Div]" )
        {
            if( this.gfnIsNull(fullpath) )
                this.fnSaveGridList(objList[i].form, objList[i].name+".form");
            else
                this.fnSaveGridList(objList[i].form, fullpath+"."+objList[i].name+".form");
        }
        // Tab
        else if( sObjType == "[object Tab]" )
        {
            let tabPageList = objList[i].tabpages;
            for(var j=0;j<tabPageList.length;j++)
            {
                if( this.gfnIsNull(fullpath) )
                    this.fnSaveGridList(tabPageList[j].form, objList[i].name+tabPageList[j].name+".form");
                else
                    this.fnSaveGridList(tabPageList[j].form, fullpath+"."+objList[i].name+tabPageList[j].name+".form");
            }
        }
    }
};


/**
 * @description 화면의 모든 Object를 저장한다. 
*/
this.fnSaveComponetsList = function(targetObj, fullpath)
{
    let sObjType;    
    let objList = targetObj.components;    
    for(let i=0;i<objList.length;i++)
    {	
        sObjType = objList[i]+"";

        // Div
        if( sObjType == "[object Div]" )
        {
            if( this.gfnIsNull(fullpath) )
                this.fnSaveComponetsList(objList[i].form, objList[i].name+".form");
            else
                this.fnSaveComponetsList(objList[i].form, fullpath+"."+objList[i].name+".form");
        }
        // Tab
        else if( sObjType == "[object Tab]" )
        {
            let tabPageList = objList[i].tabpages;
            for(let j=0;j<tabPageList.length;j++)
            {
                if( this.gfnIsNull(fullpath) )
				{
			
                    this.fnSaveComponetsList(tabPageList[j].form, objList[i].name+"."+tabPageList[j].name+".form");
                }else{
                    this.fnSaveComponetsList(tabPageList[j].form, fullpath+"."+objList[i].name+tabPageList[j].name+".form");
				}	
            }
        }
        else
        {
		
			if (!this.gfnIsNull(fullpath)) {
	            let nRow = this.dsComponents.addRow();
				let displayname = fullpath+"."+objList[i].name;
				this.dsComponents.setColumn(nRow, "NAME", displayname);		

				if( this.gfnIsNull(fullpath) )
					this.dsComponents.setColumn(nRow, "PATH", objList[i].name);
				else
					this.dsComponents.setColumn(nRow, "PATH", fullpath+"."+objList[i].name);				
			}
        }
    }
};

/**
 * @description 글로벌 데이터셋 목록을 만든다.  
*/
this.fnSaveGDSList = function()
{
	let applicationobj = app.all;
    for (let i=0;i<applicationobj.length;i++)
    {
		if (applicationobj[i]+"" == "[object Dataset]")
		{
		    try
		    {
                if (applicationobj[i].id.indexOf(".") == -1)
                {
                    var nRow = this.dsGDS.addRow();
                    this.dsGDS.setColumn(nRow, "NAME", applicationobj[i].id);
                    this.dsGDS.setColumn(nRow, "PATH", applicationobj[i].id);
                }
            }
            catch (e)
            {
				trace(">>>> e Message" + e);
            }
		}
    }
};


/**
 * @description Dataset을 GRID에 표시한다.     
*/
this.fnMakeDatasetGrid = function()
{
    let dataset;
   	let cbcomboValue = this[this.fvCurrentCombo].value;
	
	this.dsDatasetView.clearData();
	 
	    if(this.gfnIsNull(cbcomboValue))
		{
		  this.tabComponent.tabpage1.form.grdDataset.set_binddataset("");
          this.tabComponent.tabpage1.form.grdDataset.set_formats("");
		 return;
		}
	
    if( this.fvCurrentCombo == "cboDataset" )
    {
		if( this.cboDataset.index == -1  || this.gfnIsNull(this.cboDataset.value)) return;

        dataset = eval("this.opener."+this.cboDataset.value);
    }
    else
    {  
        if( this.cboGDS.index == -1 || this.gfnIsNull(this.cboGDS.text)) return;

		dataset = app[this.cboGDS.text];
    }
	
	
	this.dsDatasetView.set_enableevent(false);
	this.dsDatasetView.copyData(dataset);
	this.dsDatasetView.set_enableevent(true);

    // 데이터셋의 정보가 존재하지 않으면 
    if( dataset.getColCount() < 1 )
    {
        let formats = "";

		formats += '<Formats>\n';
        formats += '<Format id="default">\n';
        formats += '<Columns>\n';
		formats += '<Column size="131"/>\n';
        formats += '</Columns>\n';
		formats +='<Rows>\n';
		formats +='<Row size="24"/>\n'; 
		formats +='</Rows>\n';
		formats +='<Band id="body">\n';
		formats +='<Cell/>\n';
		formats +='</Band>\n';
	    formats +='</Format>\n';
	    formats +='</Formats>\n'; 
       
        this.tabComponent.tabpage1.form.grdDataset.set_formats(formats);
        
    }
    
    let columns = '    <Column size="30" />\n';
    let head    = '    <Cell col="0" text=""/>\n';
	let body    = '    <Cell col="0" displaytype="normal" text="expr:(dataset.getRowType(currow)==2)?\'I\':(dataset.getRowType(currow)==4)?\'M\':(dataset.getRowType(currow)==8)?\'\':\'\'"/>\n';    

    for(let i=0;i<dataset.getColCount();i++)
    {
        let columinfo = dataset.getColumnInfo(i);
        let columname = "";
        let columsize = "";
        let columtype = "";
        
        try
        {
             columname = columinfo.name;
             columsize = parseInt(columinfo.size);
             columtype = columinfo.type.toUpperCase();
        }
        catch(e)
        {
             columname = "undefined";
             columsize = 50;
             columtype = "STRING";
        }
        
        //Sonar Qube Unused local variables should be removed 조치 JBC 2016-09-20
        //var columwidth= 100;
        let align     = "";
        
        if( columtype == "STRING" )
        {
            columsize = columsize*9;
            
            if( columsize < columname.length*9 )
            {
                columsize = columname.length*9;
            }
            
            if( columsize > 200 )            
                columns += '    <Column size="200" />\n';
            else
                columns += '    <Column size="'+columsize+'" />\n';                
                
            align = 'style="align:left;"';
        }
        else if( columtype == "INT" )
        {
            columns += '<Column size="80" />\n';
            align = 'style="align:right;"';
        }
        else if( columtype == "FLOAT" )
        {
            columns += '<Column size="80" />\n';
            align = 'style="align:right;"';
        }
        else if( columtype == "DATE" )
        {
            columns += '<Column size="88" />\n';
            align = 'style="align:center;"';
        }
        else if( columtype == "TIME" )
        {
            columns += '<Column size="88" />\n';
            align = 'style="align:center;"';
        }
        else if( columtype == "DATETIME" )
        {
            columns += '<Column size="120" />\n';
            align = 'style="align:center;"';
        }
        else if( columtype == "BIGDECIMAL" )
        {
            columns += '<Column size="120" />\n';
            align = 'style="align:right;"';
        }
        else 
        {
            columns += '<Column size="120" />\n';
            align = 'style="align:left;"';
        }
        
        head += '    <Cell col="'+(i+1)+'" text="'+columname+'"/>\n';
		body += '    <Cell col="'+(i+1)+'" '+align+' text="bind:'+columname+'" displaytype="normal" />\n';
    }
    	
    let formats = "";
    formats += '<Formats>\n';
    formats += '<Format id="default">\n';
    formats += '<Columns>\n'+columns.substring(0,columns.length-1)+'\n</Columns>\n';
    formats += '<Rows>\n    <Row size="24" band="head" />\n    <Row size="24" />\n</Rows>\n';
    formats += '<Band id="head">\n'+head.substring(0,head.length-1)+'\n</Band>\n';
    formats += '<Band id="body">\n'+body.substring(0,body.length-1)+'\n</Band>\n';
    formats += '</Format>\n';
    formats += '</Formats>';
    
    this.tabComponent.tabpage1.form.grdDataset.set_binddataset(this.dsDatasetView.name);
    this.tabComponent.tabpage1.form.grdDataset.set_formats(formats);
	
	
	this.tabComponent.tabpage1.form.sta_totcnt.set_text("Total <fc v='#ff1414ff'><b v='true'>"+this.dsDatasetView.rowcount+"</b></fc> Row");
};

/**
 * @description 데이터셋의 내용을 XML로 표시한다. 
*/
this.fnMakeDatasetXml = function()
{
    let dataset;
	let cbcomboValue = this[this.fvCurrentCombo].value;
	
	 	if(this.gfnIsNull(cbcomboValue))
		{
		  this.tabComponent.tabpage2.form.txtSaveXML.set_value("");
		 return;
		}
	
    if( this.fvCurrentCombo == "cboDataset" )
    {
        if( this.cboDataset.index == -1 ) return;        
        dataset = eval("this.opener."+this.cboDataset.value);
	
    }
    else
    {
        if( this.cboGDS.index == -1 ) return;
		dataset = app[this.cboGDS.text];
    }
	
    let text = nexacro.replaceAll(dataset.saveXML(), '<Dataset id="'+dataset.id+'">', '');
    text = nexacro.replaceAll(text, '</Dataset>', '');
    this.tabComponent.tabpage2.form.txtSaveXML.set_value(text);
};

/**
 * @description 데이터셋을 GRID로 자동생성해준다
*/ 
this.fnMakeDatasetGridFormat = function()
{
    this.tabComponent.tabpage3.form.txtSetGrid.set_value(this.tabComponent.tabpage1.form.grdDataset.formats);
};

/**
 * @description 화면의 그리드의 포맷을 가져온다. 
*/  
this.fnMakeGridFormats = function()
{
		if(this.gfnIsNull(this.cboGrid.value))
		{
		     this.tabComponent.tabpage4.form.txtGridFormat.set_value("");   
			 return;
		}
		
	if( this.cboGrid.index == -1 ) return;
    
    let targetgrid = eval("this.opener."+this.cboGrid.value);
    
    let formats = nexacro.replaceAll(targetgrid.formats, "><", ">\n<");
    formats = nexacro.replaceAll(formats, "<Column ", "    <Column ");
    formats = nexacro.replaceAll(formats, "<Cell ", "    <Cell ");
    formats = nexacro.replaceAll(formats, "<Row ", "    <Row ");

    // 리사이징한 그리드의 현재 컬럼 사이즈를 계산한다. 
    let newcolumn = "";    
    for(let i=0;i<targetgrid.getCellCount("Body");i++)
    {
        newcolumn += '    <Column size="'+targetgrid.getRealColSize(i, true)+'"/>\n';
    }        
    formats = formats.split("<Columns>")[0]+"<Columns>\n"+newcolumn +"</Columns>"+formats.split("</Columns>")[1]; 
    
    this.tabComponent.tabpage4.form.txtGridFormat.set_value(formats);    
    this.tabComponent.set_tabindex(3);
};

/**
 * @description 컴포넌트의 모든속성을 디스플레이한다
*/ 
this.fnMakeCompoentsData = function()
{   
	
	if(this.gfnIsNull(this.cboComponents.value)) 
	{
	  this.dsProperties.clearData();
	  return;
	}
	
    if( this.cboComponents.index == -1 ) return;
    let targetobj = eval("this.opener."+this.cboComponents.value);
    this.dsProperties.clearData();
    this.dsProperties.set_enableevent(false);
    for(let name in targetobj)
    {
        let value = targetobj[name]+"";
        
        if( name[0] == "_" ) continue;
        if( value == "[object Object]" ) continue;
        if( value.substring(0, 8) == "function" ) continue;
        if( value.substring(0, 7) == "control" ) continue;        

        if( this.gfnIsNull(value) ) 
        {
            let nrow = this.dsProperties.addRow();
            this.dsProperties.setColumn(nrow, "NAME", name);
            this.dsProperties.setColumn(nrow, "VALUE", "");
        }
        else
        {
		
            // 이벤트에 대한 처리 
            if( value.indexOf("[object") != -1 )
            {
			
                if( value.indexOf("EventListener") != -1 )
                {			
                    let eventhandler = targetobj.getEventHandler(name, 0);
                   
                    if( !this.gfnIsNull(eventhandler) ) 
                    {
                        var nrow = this.dsProperties.addRow();
                        this.dsProperties.setColumn(nrow, "NAME",    name);
                        this.dsProperties.setColumn(nrow, "VALUE",   "function");
                        this.dsProperties.setColumn(nrow, "FUNCTION", eventhandler);
                        this.dsProperties.setColumn(nrow, "COLOR",    "red");
                    }
                }
            }
            else
            {
                let nrow = this.dsProperties.addRow();
                this.dsProperties.setColumn(nrow, "NAME",    name);
                this.dsProperties.setColumn(nrow, "VALUE", value);
            }
        }
    }
	
    this.dsProperties.set_enableevent(true);    
    this.dsProperties.set_rowposition(0);
};

/**
 * @description 화면에서 사용되는 모든 변수를 찾아 데이터셋에 저장한다. 
*/ 
this.fnSaveVariableList = function(targetObj, fullpath)
{	
	let sObjType = targetObj +"";
		
    // 해당 OBJECT의 전역변수를 찾아낸다. 
    this.dsVariable.set_enableevent(false);
    for(let name in targetObj)
    {
		// 폼 변수는 fv로 Naming Rule 정의
		let sVariName = name.substr(0,2);

        if (sVariName.toUpperCase() == "FV")
        {			
		//trace(" value : " +value + "<> name : " +name  "<> displayname : " +displayname);
            // 제외처리대상변수명        
            let value = targetObj[name]+"";        
            if( value.indexOf("[object") != -1 ) continue;
            if( value.substring(0, 8) == "function" ) continue;
			if( !targetObj.hasOwnProperty(name)) continue;
			
			let nRow = this.dsVariable.addRow();
			let displayname = this.gfnIsNull(fullpath) ? "this."+name : fullpath+"."+name;
			
			
			this.dsVariable.setColumn(nRow, "NAME",  displayname);
			//this.dsVariable.setColumn(nRow, "NAME",  name);
			this.dsVariable.setColumn(nRow, "VALUE", value);
			this.dsVariable.setColumn(nRow, "TYPE",  "FORM");
			this.dsVariable.setColumn(nRow, "LVL",   name.split(".").length);
        }
    }
	this.dsVariable.set_enableevent(true);
	
    // 해당 폼의 하위 OBJECT에 대한 변수도 같이 찾아온다. 
    sObjType = "";
    var objList = targetObj.components;    
    for(let i=0;i<objList.length;i++)
    {		
        sObjType = objList[i]+"";
		
        // Div
        if( sObjType == "[object Div]" )
        {
            if( this.gfnIsNull(fullpath) )
                this.fnSaveVariableList(objList[i].form, objList[i].name+".form");
            else
                this.fnSaveVariableList(objList[i].form, fullpath+"."+objList[i].name+".form");
        }
        // Tab
        else if( sObjType == "[object Tab]" )
        {
            let tabPageList = objList[i].tabpages;
            for(let j=0;j<tabPageList.length;j++)
            {
                if( this.gfnIsNull(fullpath) )
                    this.fnSaveVariableList(tabPageList[j].form, objList[i].name+tabPageList[j].name+".form");
                else
                    this.fnSaveVariableList(tabPageList[j].form, fullpath+"."+objList[i].name+tabPageList[j].name+".form");
            }
        }
    }
};

/**
 * @description 글로벌 변수를 찾아 데이터셋에 저장한다. 
*/ 
this.fnSaveGlobalVariableList = function()
{   
    this.dsVariable.set_enableevent(false);
	
	// Application 전역변수를 찾아낸다. 
	let targetObj = app;
    for(let name in targetObj)
    {
        // 글로벌 변수는 gv로 Naming Rule 정의
		let sVariName = name.substr(0,2);
        if (sVariName.toUpperCase() == "GV")
        {
            // 제외처리대상변수명        
            let value = targetObj[name]+"";        
            if( value.indexOf("[object") != -1 ) continue;
            if( value.substring(0, 8) == "function" ) continue;
			if( !targetObj.hasOwnProperty(name)) continue;
			
			// 글로벌 변수는 하나만이 존재하기 때문에.. 
			if( this.dsVariable.findRow("NAME", name) == -1 )
			{        
				let nRow = this.dsVariable.addRow();    
				this.dsVariable.setColumn(nRow, "NAME",  name);
				this.dsVariable.setColumn(nRow, "VALUE", value);
				this.dsVariable.setColumn(nRow, "TYPE",  "GLOBAL");
				this.dsVariable.setColumn(nRow, "LVL",   0);
			}
        }
    }
	
	this.dsVariable.set_enableevent(true);
};

/**
 * @description 화면에서 사용되는 모든 변수를 보여준다. 
*/
this.fnMakeVariableList = function()
{
    this.dsVariable.filter("TYPE == '"+this.tabComponent.tabpage6.form.cboVariable.value+"'");    
    this.dsVariable.set_rowposition(0);
};

/**
 * @description 문장을 스크립트로 실행한다. 
*/   
this.fnExecScript = function(obj:Button,  e:nexacro.ClickEventInfo)
{
    try
    {
	    let result = eval(this.tabComponent.tabpage7.form.txtScript.text);	    
	    if( this.gfnIsNull(result) ) result = "";
	    
	    this.tabComponent.tabpage7.form.txtResult.set_value("★★★ 성공 : "+result);
	}
	catch(ex)
	{
	    this.tabComponent.tabpage7.form.txtResult.set_value("＠＠＠ 실패 : "+ex);
	}	
};

/************************************************************************************************
 * 각 COMPONENT 별 EVENT 영역
 ************************************************************************************************/
/**
 * @description 선택한 TAB에 대한 처리를 한다.   
*/
this.tabComponent_onchanged = function(obj:Tab, e:nexacro.TabIndexChangeEventInfo)
{
	 let tabindex = this.tabComponent.tabindex;
     this.tabComponent.tabpage1.form.sta_totcnt.set_text("Total <fc v='#ff1414ff'><b v='true'>0</b></fc> Row");
	 
	switch(tabindex)
	{
	    case 0: this.fnMakeDatasetGrid();       break;
	    case 1: this.fnMakeDatasetXml();        break;
	    case 2: this.fnMakeDatasetGridFormat(); break;
	    case 3: this.fnMakeGridFormats();       break;
	    case 4: this.fnMakeCompoentsData();     break;
	    case 5: this.fnMakeVariableList();      break;
	    default : break;
	}
};

/**
 * @description 로컬 데이터셋의 내용을 보여준다.
*/ 
this.cboDataset_onitemchanged = function(obj:Combo, e:nexacro.ItemChangeEventInfo)
{
    this.cboGDS.set_value("");
	this.fvCurrentCombo = obj.name;	
    this.edtLocal.set_value(obj.text);
	this.edtGlobal.set_value("");
    this.tabComponent.set_tabindex(0);
    this.tabComponent_onchanged();    
};

/**
 * @description 글로벌 데이터셋의 내용을 보여준다.
*/ 
this.cboGDS_onitemchanged = function(obj:Combo, e:nexacro.ItemChangeEventInfo)
{
    this.cboDataset.set_value("");
	this.fvCurrentCombo = obj.name;	
    this.edtGlobal.set_value(obj.value);
	this.edtLocal.set_value("");
    this.tabComponent.set_tabindex(0);
    this.tabComponent_onchanged();    
};

/**
 * @description 컴포넌트의 모든 속성을 디스플레이한다.    
*/
this.cboComponents_onitemchanged = function(obj:Combo, e:nexacro.ItemChangeEventInfo)
{
    this.tabComponent.set_tabindex(4);
    this.tabComponent_onchanged();    
};

/**
 * @description 변수의 형식을 선택한 타입으로 필터링한다.    
*/ 
this.tabComponent_tabpage6_cboVariable_onitemchanged = function(obj:Combo, e:nexacro.ItemChangeEventInfo)
{
    this.dsVariable.filter("");
    this.dsVariable.filter("TYPE == '"+this.tabComponent.tabpage6.form.cboVariable.value+"'");    
    this.dsVariable.set_rowposition(0);
};

/**
 * @description 로컬 데이터셋 바로 찾기 기능
*/   
this.edtLocal_onkeydown = function(obj:Edit, e:nexacro.KeyEventInfo)
{
    if( e.keycode == 13 )
    {
	    let nrow = this.dsDataset.findRow("NAME", obj.value);
	    if( nrow != -1 )
	    {
	        
	        fvCurrentCombo = "local";
            this.cboDataset.set_index(nrow);		        
            this.fnMakeDatasetGrid();
            this.cboDataset_onitemchanged(this.cboDataset);
        }
	}
};

/**
 * @description 글로벌 데이터셋 바로 찾기 기능
*/    
this.edtGlobal_onkeydown = function(obj:Edit, e:nexacro.KeyEventInfo)
{
    if( e.keycode == 13 )
    {
	    let nrow = this.dsGDS.findRow("NAME", obj.value);
	    if( nrow != -1 )
	    {
	        this.fvCurrentCombo = "global";
            this.cboGDS.set_index(nrow);		        
            this.cboGDS_onitemchanged(this.cboGDS);
            //this.fnMakeDatasetGrid();
	    }
	}
};

/**
 * @description  DATASET 으로 INSERT SQL 만들기
 */
this.btnCreatSQL_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
    let insertsql = "";
	let dataset = this.tabComponent.tabpage1.form.grdDataset.getBindDataset();
    for(let i=0;i<dataset.getRowCount();i++)
    {
        
        let columlist = "";
        let valuelist = "";
        for(let j=0;j<dataset.getColCount();j++)
        {
            const columname  = dataset.getColID(j);
            let columvalue = this.gfnNvl(dataset.getColumn(i, columname),"NULL");   
            
            if( columvalue != "NULL" ) columvalue = "'"+columvalue+"'";
                                 
            if( j == 0 )
            {
                columlist = columname;
                valuelist = columvalue;
            }
            else
            {
                columlist += ", "+columname;            
                valuelist += ", "+columvalue;
            }
        }

        insertsql += "INSERT INTO "+dataset.id+" ("+columlist+") VALUES ("+valuelist+");\n";
    }        
        
	//trace( insertsql );
	system.clearClipboard();
	system.setClipboard("CF_TEXT", insertsql);    
};

/**
 * @description 컴포넌트의 textvalue 값을 클립보드에 복사한다. 
*/  
this.combo_onkeydown = function(obj:nexacro.Combo,e:nexacro.KeyEventInfo)
{
	system.clearClipboard();
	system.setClipboard("CF_TEXT", obj.text);
};

/**
 * @description 로컬 데이터셋 필터 초기화
*/ 
this.btnLocalFilter_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
    const dataset = eval("this.opener."+this.cboDataset.value);
    dataset.filter("");
};
/**
 * @description 글로벌 데이타셋 필터 초기화
*/
this.btnGlobalFilter_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	const dataset = app[this.cboGDS.text];
    dataset.filter("");
};



this.tabComponent_tabpage1_grdDataset_onkeydown = function(obj:nexacro.Grid,e:nexacro.KeyEventInfo)
{
	let keycode = e.keycode;
	let sBrowser = system.navigatorname;
	 
	if(e.ctrlkey){
		if(keycode == 67){
		
		
			//copy(복사)
			if( this.gfnIsNexacro()){
				this._gfnGridCopyEventForRuntime(obj, e);
			}else {
				this._gfnGridCopyEventForChrome(obj, e);
			}
			
			this.gfnToast();
			
		}
	}
};



this.btnInit_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.reload();
};

//엑셀 다운로드
this.tabComponent_tabpage1_btnExcelDown_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
        let objGrid = this.tabComponent.tabpage1.form.grdDataset;
		let bindds  = objGrid.getBindDataset();
		if(bindds.getRowCount() == 0) return;		
		
		let scbotitle = this.gfnIsNotNull(this.cboDataset.value) ? this.cboDataset.text : this.cboGDS.text;  
		this.gfnExcelExport(objGrid,"DATASET_" + scbotitle  ,"DebugExcel_"+scbotitle +"_" + this.gfnToday()); 
};


this.Button00_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.resetScroll();
     this.tabComponent.tabpage1.form.resetScroll();
};

this.cmmDebug_onsize = function(obj:nexacro.Form,e:nexacro.SizeEventInfo)
{
   this.tabComponent.height = null;
   this.tabComponent.bottom = 20; 
};
]]></Script>
    <Bind>
      <BindItem id="item0" compid="tabComponent.tabpage5.form.txtScript" propid="value" datasetid="dsProperties" columnid="FUNCTION"/>
      <BindItem id="item1" compid="tabComponent.Tabpage8.form.btn_search" propid="text" datasetid="gds_lang" columnid="SEARCH"/>
      <BindItem id="item2" compid="tabComponent.Tabpage8.form.btn_search" propid="tooltiptext" datasetid="gds_lang" columnid="SEARCH"/>
    </Bind>
  </Form>
</FDL>
